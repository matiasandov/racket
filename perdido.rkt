#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1606 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"Implement a Deterministic Finite Automata"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"Mat\303\255as Mendez"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"10/03/2021"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 19 3 57
#"\"lee cada linea del archivo mientras no acabe el archivo\""
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-file"
0 0 25 3 1 #" "
0 0 14 3 12 #"in-file-path"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 20 #"call-with-input-file"
0 0 25 3 1 #" "
0 0 14 3 12 #"in-file-path"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 2 #"in"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (["
0 0 14 3 4 #"line"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 25 3 1 #" "
0 0 14 3 2 #"in"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 11 #"eof-object?"
0 0 25 3 1 #" "
0 0 14 3 4 #"line"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 6 #"result"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 25 3 1 #" "
0 0 14 3 2 #"in"
0 0 25 3 3 #") ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 4 #"line"
0 0 25 3 8 #"))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 7 #"funcion"
0 0 19 3 1 #" "
0 0 19 3 3 #"que"
0 0 19 3 1 #" "
0 0 19 3 5 #"llame"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 3 #"las"
0 0 19 3 1 #" "
0 0 19 3 4 #"read"
0 0 19 3 1 #" "
0 0 19 3 4 #"file"
0 0 19 3 1 #"("
0 0 19 3 8 #"devuelve"
0 0 19 3 1 #" "
0 0 19 3 3 #"lis"
0 0 19 3 2 #"ta"
0 0 19 3 1 #" "
0 0 19 3 3 #"con"
0 0 19 3 1 #" "
0 0 19 3 4 #"cada"
0 0 19 3 1 #" "
0 0 19 3 7 #"renglon"
0 0 19 3 1 #")"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 10 #"arithmetic"
0 0 19 3 1 #" "
0 0 19 3 5 #"lexer"
0 0 19 3 1 #" "
0 0 19 3 4 #"para"
0 0 19 3 1 #" "
0 0 19 3 4 #"cada"
0 0 19 3 1 #" "
0 0 19 3 7 #"renglon"
0 0 19 3 1 #" "
0 0 19 3 3 #"del"
0 0 19 3 1 #" "
0 0 19 3 7 #"archivo"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 5 #"write"
0 0 19 3 5 #" file"
0 0 19 3 1 #"\""
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"file-lexer"
0 0 25 3 1 #" "
0 0 14 3 9 #"name-file"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"content"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-file"
0 0 25 3 1 #" "
0 0 14 3 9 #"name-file"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (["
0 0 14 3 4 #"cont"
0 0 25 3 1 #" "
0 0 14 3 7 #"content"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 6 #"result"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     )"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"cont"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 6 #"result"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"cont"
0 0 25 3 2 #") "
0 0 17 3 42 #"; recorrer la lista vas sacando el primero"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #"("
0 0 14 3 16 #"arithmetic-lexer"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"cont"
0 0 25 3 4 #"))) "
0 0 17 3 45 #";el priemro de la lsita lo pasas a la funcion"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"arithmetic-lexer"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-string"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 15 #"validate-string"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-string"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 24 #"accept-simple-arithmetic"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"q0"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 14 3 6 #"var_sp"
0 0 25 3 1 #" "
0 0 14 3 6 #"int_sp"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 5 #"float"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"com"
0 0 25 3 5 #" ))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"validate-string"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-string"
0 0 25 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 9 #"Determine"
0 0 19 3 1 #" "
0 0 19 3 2 #"if"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 8 #"accepted"
0 0 19 3 1 #" "
0 0 19 3 2 #"by"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 3 #"dfa"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 3 #"Ex:"
0 0 19 3 2 #" ("
0 0 19 3 15 #"validate-string"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 7 #"abababa"
0 0 19 3 1 #"'"
0 0 19 3 2 #" ("
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 15 #"accept-start-ba"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 2 #"q0"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 1 #"("
0 0 19 3 2 #"q2"
0 0 19 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 10 #"Arguments:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 12 #"input-string"
0 0 19 3 1 #" "
0 0 19 3 2 #"->"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 1 #" "
0 0 19 3 3 #"que"
0 0 19 3 1 #" "
0 0 19 3 7 #"quieres"
0 0 19 3 1 #" "
0 0 19 3 7 #"validar"
0 0 19 3 1 #","
0 0 19 3 7 #"-------"
0 0 19 3 1 #" "
0 0 19 3 2 #"en"
0 0 19 3 1 #" "
0 0 19 3 4 #"este"
0 0 19 3 1 #" "
0 0 19 3 4 #"caso"
0 0 19 3 1 #" "
0 0 19 3 2 #"le"
0 0 19 3 1 #" "
0 0 19 3 9 #"pasaremos"
0 0 19 3 1 #" "
0 0 19 3 2 #"el"
0 0 19 3 1 #" "
0 0 19 3 6 #"nombre"
0 0 19 3 1 #" "
0 0 19 3 3 #"del"
0 0 19 3 1 #" "
0 0 19 3 18 #"archivo-----------"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 3 #"dfa"
0 0 19 3 1 #" "
0 0 19 3 1 #"-"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 5 #"these"
0 0 19 3 1 #" "
0 0 19 3 8 #"elements"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 10 #"transition"
0 0 19 3 1 #" "
0 0 19 3 8 #"function"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 5 #"start"
0 0 19 3 1 #" "
0 0 19 3 5 #"state"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 6 #"accept"
0 0 19 3 1 #" "
0 0 19 3 6 #"states"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 7 #"Return:"
0 0 19 3 1 #" "
0 0 19 3 8 #"boolean "
0 0 19 3 1 #"\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (["
0 0 14 3 3 #"lst"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 12 #"input-string"
0 0 25 3 3 #")] "
0 0 17 3 37 #";lee el string y lo pone en una lista"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 5 #"state"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 25 3 7 #")]     "
0 0 17 3 32 #"; The second element in the list"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 10 #"token-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 10 #"transition"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 25 3 3 #")] "
0 0 17 3 31 #"; The first element in the list"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ["
0 0 14 3 9 #"act-token"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 2 #"] "
0 0 17 3 13 #";token actual"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"     ) "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 56 #"; Check if the final state is in the list of acceptables"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 25 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 53 #"; Return the list of tokens and the last accept state"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 10 #"let-values"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 40 #";queremos guardar el symbol en un symbol"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 30 #";car te da primero de la lista"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"          ([("
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-type"
0 0 25 3 3 #") ("
0 0 14 3 10 #"transition"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 17 3 16 #"; Recursive call"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"loop"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 5 #"state"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 30 #"; Add valid tokens to the list"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-type"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 9 #"act-token"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-type"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 14 3 10 #"token-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 30 #"; Pass the same function again"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 10 #"transition"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"token-type"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #"("
0 0 14 3 3 #"lst"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 9 #"act-token"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #"  "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            )"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"          ))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 24 #"accept-simple-arithmetic"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 7 #"Accepts"
0 0 19 3 1 #" "
0 0 19 3 10 #"arithmetic"
0 0 19 3 1 #" "
0 0 19 3 11 #"expressions"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 8 #"positive"
0 0 19 3 1 #" "
0 0 19 3 9 #"integers\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (["
0 0 14 3 3 #"ops"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\="
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\+"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\-"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\*"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\/"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\^"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"q0"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" )] "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 16 #"char-alphabetic?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 44 #";rechaza cualquier cosa que no sea un numero"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"q0"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #" )]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        )]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 53 #";-------------checar que onda con parentesis---------"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\."
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";dot"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"int_sp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 27 #";si no funcionan e, poner ^"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"        )] "
0 0 17 3 23 #"; An int had been found"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 5 #";n_sp"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"int_sp"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"int_sp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        )]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 16 #"char-alphabetic?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 44 #";rechaza cualquier cosa que no sea un numero"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\_"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\("
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\)"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"var_sp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 5 #";v_sp"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"var_sp"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"var_sp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\("
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\)"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 16 #"char-alphabetic?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 22 #";te regresa a variable"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\("
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\)"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"paren"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"float"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"float"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"float"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\e"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 2 #";e"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\E"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 2 #";e"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"int_sp"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"float"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"float"
0 0 25 3 3 #")] "
0 0 17 3 23 #"; An int had been found"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\-"
0 0 25 3 4 #" ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";dot"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 6 #"   ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"int_sp"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 3 #")] "
0 0 17 3 23 #"; An int had been found"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"int"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 3 #")] "
0 0 17 3 19 #"; Found an operator"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\/"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 17 3 11 #";comentario"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 16 #"char-alphabetic?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        )]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 13 #"char-numeric?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 4 #";int"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 16 #"char-alphabetic?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")] "
0 0 17 3 44 #";rechaza cualquier cosa que no sea un numero"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 3 #"ops"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 22 3 7 #"#\\space"
0 0 25 3 5 #"  ) ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"com"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" ) ]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                          )]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"invalid"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      )"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
